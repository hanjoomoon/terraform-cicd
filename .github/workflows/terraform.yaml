# terraform.yaml
name: 'Terraform'

on:
  push:
    branches:
    - "develop"

env:
  AWS_REGION: ap-northeast-2   # set this to your preferred AWS region, e.g. us-west-1

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # AWS 리소스를 이용하기 위해서 추가
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run : | 
        cd develop
        terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt --recursive

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd develop
        terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     - name: Terraform Apply
# #      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
# 	    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#       run: terraform apply -auto-approve -input=false
    - name: Terraform Apply
      run: |
        cd develop
        terraform apply -auto-approve -input=false